// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace SpotMapApi.Migrations
{
    [DbContext(typeof(MarkerContext))]
    [Migration("20250318185246_AddUserIdToMarker")]
    partial class AddUserIdToMarker
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Marker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Markers");
                });

            modelBuilder.Entity("Marker", b =>
                {
                    b.OwnsOne("Coordinates", "Position", b1 =>
                        {
                            b1.Property<int>("MarkerId")
                                .HasColumnType("int");

                            b1.Property<double>("Lat")
                                .HasColumnType("float");

                            b1.Property<double>("Lng")
                                .HasColumnType("float");

                            b1.HasKey("MarkerId");

                            b1.ToTable("Markers");

                            b1.WithOwner()
                                .HasForeignKey("MarkerId");
                        });

                    b.Navigation("Position")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
